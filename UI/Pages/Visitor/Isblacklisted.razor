@page "/Isblacklisted"
@inject VisitorConsumer VisitorConsumer
@attribute [Authorize(Roles = "SecurityManager")]

<div class="container">
    <div class="text-center mt-5">
        <h1 class="text-primary font-weight-bold">Search for Visitor</h1>
        <p class="text-secondary">Search by phone number, passport number, or national ID</p>
    </div>

    <div class="card shadow-lg p-4 mt-4">
        <h4 class="text-center mb-4 text-dark">Search Blacklisted Visitor</h4>
        <div class="input-group mb-3 mt-4">
            <select class="form-select" @bind="searchType">
                <option value="Phone">Phone Number</option>
                <option value="Passport">Passport Number</option>
                <option value="NationalId">National ID</option>
            </select>
            <input type="text" class="form-control text-end" @bind="searchInput" placeholder="Enter required data">
            <button class="btn btn-primary" @onclick="SearchVisitor">Search</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3 text-center">@errorMessage</div>
    }

    @if (visitors?.Count > 0)
    {
        <div class="card shadow-lg p-4 mt-4">
            <h4 class="text-center mb-4 text-dark">Visitors</h4>
            <table class="table table-bordered text-center">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Phone Number</th>
                        <th>Email</th>
                        <th>Passport Number</th>
                        <th>National ID</th>
                        <th>Notes</th>
                        <th>Action</th>
                        <th>Remove from Blacklist</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var visitor in visitors)
                    {
                        bool isEditing = visitor.VisitorId == editingVisitorId;
                        <tr>
                            <td>
                                @if (isEditing)
                                {
                                    <input class="form-control" @bind="visitor.name" />
                                }
                                else
                                {
                                    @visitor.name
                                }
                            </td>
                            <td>
                                @if (isEditing)
                                {
                                    <input class="form-control" @bind="visitor.phone_no" />
                                }
                                else
                                {
                                    @visitor.phone_no
                                }
                            </td>
                            <td>
                                @if (isEditing)
                                {
                                    <input class="form-control" @bind="visitor.E_mail" />
                                }
                                else
                                {
                                    @visitor.E_mail
                                }
                            </td>
                            <td>
                                @if (isEditing)
                                {
                                    <input class="form-control" @bind="visitor.passport_no" />
                                }
                                else
                                {
                                    @visitor.passport_no
                                }
                            </td>
                            <td>
                                @if (isEditing)
                                {
                                    <input class="form-control" @bind="visitor.NationalIdCard" />
                                }
                                else
                                {
                                    @visitor.NationalIdCard
                                }
                            </td>
                            <td>
                                @if (isEditing)
                                {
                                    <input class="form-control" @bind="visitor.notes" />
                                }
                                else
                                {
                                    @visitor.notes
                                }
                            </td>
                            <td>
                                @if (visitor.IsBlacklisted.GetValueOrDefault())
                                {
                                    @if (isEditing)
                                    {
                                        <div class="btn-group">
                                            <button class="btn btn-success btn-sm" @onclick="() => SaveVisitor(visitor)">Save</button>
                                            <button class="btn btn-warning btn-sm" @onclick="CancelEdit">Cancel</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-info btn-sm" @onclick="() => EditVisitor(visitor)">Edit</button>
                                    }
                                }
                                else
                                {
                                    <button class="btn btn-dark btn-sm" @onclick="() => AddToBlacklist(visitor)">Add to Blacklist</button>
                                }
                            </td>
                            <td>
                                @if (visitor.IsBlacklisted.GetValueOrDefault())
                                {
                                    <button class="btn btn-danger btn-sm" @onclick="() => ShowConfirmModal(visitor)">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (searched)
    {
        <div class="alert alert-warning mt-3 text-center">No visitors found.</div>
    }
</div>


@if (showConfirmModal && selectedVisitor != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmModal"></button>
                </div>
                <div class="modal-body text-center">
                    <p>Are you sure you want to remove <strong>@selectedVisitor.name</strong> from the blacklist?</p>
                </div>
                <div class="modal-footer justify-content-center">
                    <button class="btn btn-secondary" @onclick="CloseConfirmModal">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private List<VisitorViewModel> visitors = new();
    private string errorMessage = "";
    private bool searched = false;
    private string searchType = "Phone";
    private string searchInput = "";
    private int? editingVisitorId = null;

    private bool showConfirmModal = false;
    private VisitorViewModel selectedVisitor;

    protected override async Task OnInitializedAsync()
    {
        await LoadBlacklistedVisitors();
    }

    private async Task LoadBlacklistedVisitors()
    {
        errorMessage = "";
        searched = true;
        editingVisitorId = null;
        var result = await VisitorConsumer.GetBlacklistedVisitors();
        if (!result.HasErrors)
        {
            visitors = result.Data;
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors);
        }
    }

    private async Task SearchVisitor()
    {
        errorMessage = "";
        searched = true;
        editingVisitorId = null;

        if (string.IsNullOrWhiteSpace(searchInput))
        {
            await LoadBlacklistedVisitors();
            return;
        }

        APIReturn<List<VisitorViewModel>> result = searchType switch
        {
            "Passport" => await VisitorConsumer.GetVisitorsByPassportId(searchInput),
            "NationalId" => await VisitorConsumer.GetVisitorsByNationalIdCard(searchInput),
            _ => await VisitorConsumer.GetVisitorsByPhoneNumber(searchInput),
        };

        if (!result.HasErrors)
        {
            visitors = result.Data;
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors);
        }
    }

    private void EditVisitor(VisitorViewModel visitor)
    {
        editingVisitorId = visitor.VisitorId;
    }

    private void CancelEdit()
    {
        editingVisitorId = null;
    }

    private async Task SaveVisitor(VisitorViewModel visitor)
    {
        var result = await VisitorConsumer.UpdateVisitorById(visitor);
        if (!result.HasErrors)
        {
            editingVisitorId = null;
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors);
        }
    }

    private async Task RemoveFromBlacklist(VisitorViewModel visitor)
    {
        visitor.IsBlacklisted = false;
        var result = await VisitorConsumer.UpdateVisitorById(visitor);
        if (!result.HasErrors)
        {
            visitors.Remove(visitor);
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors);
        }
    }

    private async Task AddToBlacklist(VisitorViewModel visitor)
    {
        visitor.IsBlacklisted = true;
        var result = await VisitorConsumer.UpdateVisitorById(visitor);
        if (!result.HasErrors)
        {
            StateHasChanged();
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors);
        }
    }

    private void ShowConfirmModal(VisitorViewModel visitor)
    {
        selectedVisitor = visitor;
        showConfirmModal = true;
    }

    private void CloseConfirmModal()
    {
        showConfirmModal = false;
        selectedVisitor = null;
    }

    private async Task ConfirmDelete()
    {
        if (selectedVisitor != null)
        {
            await RemoveFromBlacklist(selectedVisitor);
        }
        CloseConfirmModal();
    }
}
